/*
const piratesMenu = document.getElementById('pirates-menu');
const piratesMenuClose = document.getElementById('pirates-menu-close');
const piratesList = document.getElementById('pirates-list');
const carouselLeft = document.getElementById('carousel-left');
const carouselRight = document.getElementById('carousel-right');
const pirateDetails = document.getElementById('pirate-details');
const pirateImage = document.getElementById('pirate-image');
const pirateName = document.getElementById('pirate-name');
const pirateDescription = document.getElementById('pirate-description');
const pirateStats = document.getElementById('pirate-stats');
const pirateCost = document.getElementById('pirate-cost');
const hireBtn = document.getElementById('hire-btn');
const pirateStats1 = document.getElementById('pirate-stats-1');
const pirateStats2 = document.getElementById('pirate-stats-2');
const pirateCost1  = document.getElementById('pirate-cost-1');
const pirateCost2  = document.getElementById('pirate-cost-2');
const pirateType   = document.getElementById('pirate-type');


let currentTavernLevel = 0;

export function openPiratesMenu(tavernLevel) {
  // Сохраняем текущий уровень таверны и наполняем список
  currentTavernLevel = tavernLevel;
  pirateDetails.classList.add('hidden');
  piratesList.innerHTML = '';

  pirates.forEach(pirate => {
    const wrapper = document.createElement('div');
    wrapper.classList.add('pirate-item');

    // Если пират ещё не доступен — затемняем и ставим замок
    if (pirate.unlockLevel > tavernLevel) {
      wrapper.classList.add('locked');
    }

    const img = document.createElement('img');
    img.src = pirate.portrait;
    img.alt = pirate.name;
    wrapper.appendChild(img);

    // Всегда открываем детали (даже заблокированных)
    wrapper.addEventListener('click', () => {
      showPirateDetails(pirate);
    });

    piratesList.appendChild(wrapper);
  });
}

export function closePiratesMenu() {
  pirateDescription.scrollTop = 0;
  piratesMenu.classList.add('hidden');
  pirateDetails.classList.add('hidden');

  pirateImage.src = '';
  pirateName.textContent = '';
  pirateDescription.textContent = '';
  [ pirateStats1, pirateStats2, pirateCost1, pirateCost2 ].forEach(el => el.textContent = '');
  pirateType.textContent = '';
  hireBtn.onclick = null;
}

// аналогично openPiratesMenu, но для animals
export function openBeastsMenu(tavernLevel) {
  currentTavernLevel = tavernLevel;
  pirateDetails.classList.add('hidden');
  piratesList.innerHTML = '';

  animals.forEach(animal => {
    const wrapper = document.createElement('div');
    wrapper.classList.add('pirate-item');
    if (animal.unlockLevel > tavernLevel) wrapper.classList.add('locked');

    const img = document.createElement('img');
    img.src = animal.portrait;
    img.alt = animal.name;
    wrapper.appendChild(img);

    wrapper.addEventListener('click', () => showPirateDetails(animal));
    piratesList.appendChild(wrapper);
  });
}


piratesMenuClose.addEventListener('click', () => {
  closePiratesMenu();
});

carouselLeft.addEventListener('click', () => {
  piratesList.scrollBy({ left: -100, behavior: 'smooth' });
});

carouselRight.addEventListener('click', () => {
  piratesList.scrollBy({ left: 100, behavior: 'smooth' });
});

function showPirateDetails(pirate) {
  // Показываем меню и детали
  piratesMenu.classList.remove('hidden');
  pirateDetails.classList.remove('hidden');

  // Подготавливаем путь к "большому" изображению
  const pirateImagePath = pirate.portrait.replace('_portret', '');
  pirateImage.src = pirateImagePath;

  // Наполняем информацию
  pirateName.textContent = pirate.name;
  pirateType.textContent = `Тип: ${pirate.type}`;
  pirateDescription.textContent = pirate.description;
  pirateDescription.scrollTop = 0;

  // две строки статистики
pirateStats1.textContent = 
  `Здоровье: ${pirate.stats.health}    Атака: ${pirate.stats.attack}`;
pirateStats2.textContent = 
  `Защита:   ${pirate.stats.defense}    Скорость: ${pirate.stats.speed}`;

// две строки стоимости
pirateCost1.textContent = 
  `Золото: ${pirate.cost.gold}    Дерево: ${pirate.cost.wood}`;
pirateCost2.textContent = 
  `Камень: ${pirate.cost.stone}`;

  // Если пират заблокирован — делаем кнопку недоступной
  if (pirate.unlockLevel > currentTavernLevel) {
    hireBtn.disabled = true;
    hireBtn.textContent = 'Недоступно';
    hireBtn.onclick = null;
  } else {
    hireBtn.disabled = false;
    hireBtn.textContent = 'Нанять';
    hireBtn.onclick = () => hirePirate(pirate);
  }
}

function hirePirate(pirate) {
  const { gold, wood, stone } = pirate.cost;
  const missing = [];
  if (resources.gold < gold) missing.push(`золота ${gold - resources.gold}`);
  if (resources.wood < wood) missing.push(`дерева ${wood - resources.wood}`);
  if (resources.stone < stone) missing.push(`камня ${stone - resources.stone}`);

  if (missing.length === 0) {
    resources.gold -= gold;
    resources.wood -= wood;
    resources.stone -= stone;
    updateResourcesUI();
    alert(`${pirate.name} нанят!`);
  } else {
    alert(`Недостаточно ресурсов! Не хватает: ${missing.join(', ')}.`);
  }
}

export const moveBtn = (() => {
  const btn = document.createElement('button');
  btn.id = 'move-btn';
  btn.textContent = 'Переместить';
  btn.style.display = 'none';
  btn.classList.add('menu-button');
  menu.appendChild(btn);
  return btn;
})();

export const tooltip = (() => {
  const t = document.createElement('div');
  t.id = 'tooltip';
  t.style.position = 'absolute';
  t.style.background = 'rgba(0,0,0,0.7)';
  t.style.color = 'white';
  t.style.padding = '5px 10px';
  t.style.borderRadius = '5px';
  t.style.pointerEvents = 'none';
  t.classList.add('hidden');
  document.body.appendChild(t);
  return t;
})();

export function updateResourcesUI() {
  document.getElementById('gold').textContent = formatNum(resources.gold);
  document.getElementById('wood').textContent = formatNum(resources.wood);
  document.getElementById('stone').textContent = formatNum(resources.stone);
  document.getElementById('cristal').textContent = formatNum(resources.cristal);
}

function updateHarvestProgress(building) {
  const harvestBar = document.getElementById('menu-harvest-bar');
  const progressText = document.querySelector('#menu-harvest-progress .progress-text');
  const now = Date.now();
  const elapsed = now - building.lastCollect;
  const total = building.collectInterval;
  const progress = Math.min(elapsed / total, 1);
  if (harvestBar && progressText) {
    harvestBar.style.transition = 'none';
    harvestBar.style.width = `${progress * 100}%`;
    progressText.textContent = `${Math.floor(elapsed / 1000)} / ${Math.ceil(total / 1000)}с`;
    if (progress >= 1) {
      building.lastCollect = now;
      harvestBar.style.transition = 'none';
      harvestBar.style.width = '0%';
      progressText.textContent = `0 / ${Math.ceil(total / 1000)}с`;
    }
  }
}*/












  collectBtn.addEventListener('click', () => {
    if (selected?.kind === 'mine') {
      selected.collect();
      updateResourcesUI();
      openMenu(selected);
    }
  });


  upgradeBtn.addEventListener('click', () => {
  if (selected) {
    selected.startUpgrade();
    // сразу перерисовать меню — покажет прогресс-бар и кнопку «Ускорить»
    openMenu(selected);
  }
});


  speedupBtn.addEventListener('click', () => {
  if (!selected?.upgrading) return;
  const now = Date.now();
  const remMs = selected.upgradeDuration - (now - selected.upgradeStart);
  if (remMs <= 0) return;
  const cost = Math.ceil((remMs / 60000) / 6);
  if (resources.cristal < cost) {
    alert(`Нужно ${cost} кристаллов`);
    return;
  }
  resources.cristal -= cost;
  updateResourcesUI();
  selected.finishUpgrade();
  // и после завершения апгрейда тоже обновить меню,
  // чтобы отобразить новый уровень и разблокированные пиратов
  openMenu(selected);
});

  moveBtn.addEventListener('click', () => {
  if (!selected) return;
  moving = true;
  moveTarget = selected;   // фиксируем именно это здание
  closeMenu();             // прячем меню, переходим в режим перемещения
});
